apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-tools-config
  namespace: {{ .Values.release.namespace }}
data:
  tools.json: |
    {
      "tools": [
        {
          "name": "search_documentation",
          "description": "Поиск в технической документации",
          "parameters": {
            "query": "string",
            "max_results": "integer"
          },
          "code": "async def search_documentation(query: str, max_results: int = 5) -> list:\n    # Реализация поиска\n    pass"
        },
        {
          "name": "code_analyzer",
          "description": "Анализ и оптимизация кода",
          "parameters": {
            "code": "string",
            "language": "string"
          },
          "code": "async def code_analyzer(code: str, language: str) -> dict:\n    # Анализ кода\n    pass"
        },
        {
          "name": "memory_optimizer",
          "description": "Оптимизация использования памяти",
          "parameters": {
            "process_id": "integer"
          },
          "code": "async def memory_optimizer(process_id: int) -> dict:\n    # Оптимизация памяти\n    pass"
        },
        {
          "name": "context_manager",
          "description": "Управление контекстом диалога",
          "parameters": {
            "context_size": "integer",
            "priority": "string"
          },
          "code": "async def context_manager(context_size: int, priority: str) -> dict:\n    # Управление контекстом\n    pass"
        },
        {
          "name": "token_analyzer",
          "description": "Анализ использования токенов",
          "parameters": {
            "text": "string",
            "model": "string"
          },
          "code": "async def token_analyzer(text: str, model: str) -> dict:\n    # Анализ токенов\n    pass"
        },
        {
          "name": "prompt_optimizer",
          "description": "Оптимизация промптов",
          "parameters": {
            "prompt": "string",
            "target_tokens": "integer"
          },
          "code": "async def prompt_optimizer(prompt: str, target_tokens: int) -> str:\n    # Оптимизация промптов\n    pass"
        },
        {
          "name": "conversation_summarizer",
          "description": "Создание саммари диалога",
          "parameters": {
            "conversation": "string",
            "max_length": "integer"
          },
          "code": "async def conversation_summarizer(conversation: str, max_length: int) -> str:\n    # Создание саммари\n    pass"
        },
        {
          "name": "semantic_search",
          "description": "Семантический поиск по истории",
          "parameters": {
            "query": "string",
            "threshold": "float"
          },
          "code": "async def semantic_search(query: str, threshold: float) -> list:\n    # Семантический поиск\n    pass"
        },
        {
          "name": "style_adapter",
          "description": "Адаптация стиля общения",
          "parameters": {
            "text": "string",
            "style": "string"
          },
          "code": "async def style_adapter(text: str, style: str) -> str:\n    # Адаптация стиля\n    pass"
        },
        {
          "name": "format_converter",
          "description": "Конвертация форматов ответов",
          "parameters": {
            "content": "string",
            "target_format": "string"
          },
          "code": "async def format_converter(content: str, target_format: str) -> str:\n    # Конвертация форматов\n    pass"
        },
        {
          "name": "template_manager",
          "description": "Управление шаблонами ответов",
          "parameters": {
            "template_id": "string",
            "variables": "object"
          },
          "code": "async def template_manager(template_id: str, variables: dict) -> str:\n    # Управление шаблонами\n    pass"
        },
        {
          "name": "error_analyzer",
          "description": "Анализ ошибок в ответах",
          "parameters": {
            "response": "string",
            "context": "string"
          },
          "code": "async def error_analyzer(response: str, context: str) -> dict:\n    # Анализ ошибок\n    pass"
        },
        {
          "name": "knowledge_validator",
          "description": "Валидация знаний",
          "parameters": {
            "statement": "string",
            "sources": "array"
          },
          "code": "async def knowledge_validator(statement: str, sources: list) -> dict:\n    # Валидация знаний\n    pass"
        },
        {
          "name": "model_performance_analyzer",
          "description": "Анализ производительности и использования ресурсов модели",
          "parameters": {
            "model_name": "string",
            "time_period": "integer",
            "metrics": "array"
          },
          "code": "async def model_performance_analyzer(model_name: str, time_period: int, metrics: list) -> dict:\n    # Анализ производительности модели\n    pass"
        },
        {
          "name": "context_window_optimizer",
          "description": "Оптимизация размера контекстного окна для различных моделей",
          "parameters": {
            "model_name": "string",
            "text_length": "integer",
            "memory_limit": "integer"
          },
          "code": "async def context_window_optimizer(model_name: str, text_length: int, memory_limit: int) -> dict:\n    # Оптимизация контекстного окна\n    pass"
        },
        {
          "name": "model_switcher",
          "description": "Интеллектуальное переключение между моделями на основе запроса",
          "parameters": {
            "query": "string",
            "available_models": "array",
            "requirements": "object"
          },
          "code": "async def model_switcher(query: str, available_models: list, requirements: dict) -> str:\n    # Выбор оптимальной модели\n    pass"
        },
        {
          "name": "response_formatter",
          "description": "Форматирование и структурирование ответов модели",
          "parameters": {
            "response": "string",
            "format": "string",
            "style": "string"
          },
          "code": "async def response_formatter(response: str, format: str, style: str) -> str:\n    # Форматирование ответа\n    pass"
        },
        {
          "name": "conversation_archiver",
          "description": "Архивация и индексация истории диалогов",
          "parameters": {
            "conversation_id": "string",
            "metadata": "object",
            "tags": "array"
          },
          "code": "async def conversation_archiver(conversation_id: str, metadata: dict, tags: list) -> dict:\n    # Архивация диалога\n    pass"
        },
        {
          "name": "prompt_template_manager",
          "description": "Управление и применение шаблонов промптов",
          "parameters": {
            "template_name": "string",
            "variables": "object",
            "model": "string"
          },
          "code": "async def prompt_template_manager(template_name: str, variables: dict, model: str) -> str:\n    # Управление шаблонами\n    pass"
        },
        {
          "name": "token_usage_tracker",
          "description": "Отслеживание и оптимизация использования токенов",
          "parameters": {
            "text": "string",
            "model": "string",
            "max_tokens": "integer"
          },
          "code": "async def token_usage_tracker(text: str, model: str, max_tokens: int) -> dict:\n    # Отслеживание токенов\n    pass"
        },
        {
          "name": "model_config_manager",
          "description": "Управление конфигурациями различных моделей",
          "parameters": {
            "model_name": "string",
            "config": "object",
            "validate": "boolean"
          },
          "code": "async def model_config_manager(model_name: str, config: dict, validate: bool) -> dict:\n    # Управление конфигурациями\n    pass"
        },
        {
          "name": "response_validator",
          "description": "Валидация и проверка качества ответов модели",
          "parameters": {
            "response": "string",
            "criteria": "object",
            "threshold": "float"
          },
          "code": "async def response_validator(response: str, criteria: dict, threshold: float) -> dict:\n    # Валидация ответов\n    pass"
        },
        {
          "name": "deepseek_optimizer",
          "description": "Оптимизация параметров для модели deepseek-r1:14b",
          "parameters": {
          "model_config": "object",
          "performance_metrics": "object"
          },
          "code": "async def deepseek_optimizer(model_config: dict, performance_metrics: dict) -> dict:\n    try:\n        optimized_config = optimize_model_parameters(model_config, performance_metrics)\n        return {\n            'optimized_config': optimized_config,\n            'estimated_performance': calculate_performance_impact(optimized_config)\n        }\n    except Exception as e:\n        return {'error': str(e)}"
        },
        {
          "name": "memory_profiler",
          "description": "Профилирование использования памяти",
          "parameters": {
          "process_name": "string",
          "duration": "integer"
          },
          "code": "async def memory_profiler(process_name: str, duration: int) -> dict:\n    try:\n        profile_data = collect_memory_metrics(process_name, duration)\n        return analyze_memory_usage(profile_data)\n    except Exception as e:\n        return {'error': str(e)}"
        },
        {
          "name": "gpu_optimizer",
          "description": "Оптимизация использования GPU",
          "parameters": {
          "gpu_config": "object",
          "workload_type": "string"
          },
          "code": "async def gpu_optimizer(gpu_config: dict, workload_type: str) -> dict:\n    try:\n        return optimize_gpu_settings(gpu_config, workload_type)\n    except Exception as e:\n        return {'error': str(e)}"
        },
        {
          "name": "batch_size_optimizer",
          "description": "Оптимизация размера батча",
          "parameters": {
          "current_batch_size": "integer",
          "memory_limit": "integer"
          },
          "code": "async def batch_size_optimizer(current_batch_size: int, memory_limit: int) -> dict:\n    try:\n        return calculate_optimal_batch_size(current_batch_size, memory_limit)\n    except Exception as e:\n        return {'error': str(e)}"
        },
        {
          "name": "context_window_manager",
          "description": "Управление размером контекстного окна",
          "parameters": {
          "text_length": "integer",
          "max_context": "integer"
          },
          "code": "async def context_window_manager(text_length: int, max_context: int) -> dict:\n    try:\n        return optimize_context_window(text_length, max_context)\n    except Exception as e:\n        return {'error': str(e)}"
        },
        {
          "name": "performance_monitor",
          "description": "Мониторинг производительности модели",
          "parameters": {
          "metrics": "array",
          "interval": "integer"
          },
          "code": "async def performance_monitor(metrics: list, interval: int) -> dict:\n    try:\n        return collect_performance_metrics(metrics, interval)\n    except Exception as e:\n        return {'error': str(e)}"
        },
        {
          "name": "resource_allocator",
          "description": "Оптимальное распределение ресурсов",
          "parameters": {
          "available_resources": "object",
          "priority": "string"
          },
          "code": "async def resource_allocator(available_resources: dict, priority: str) -> dict:\n    try:\n        return allocate_resources(available_resources, priority)\n    except Exception as e:\n        return {'error': str(e)}"
        },
        {
          "name": "cache_optimizer",
          "description": "Оптимизация кэширования",
          "parameters": {
          "cache_config": "object",
          "usage_patterns": "array"
          },
          "code": "async def cache_optimizer(cache_config: dict, usage_patterns: list) -> dict:\n    try:\n        return optimize_cache_settings(cache_config, usage_patterns)\n    except Exception as e:\n        return {'error': str(e)}"
        },
        {
          "name": "thread_manager",
          "description": "Управление потоками обработки",
          "parameters": {
          "thread_count": "integer",
          "workload": "object"
          },
          "code": "async def thread_manager(thread_count: int, workload: dict) -> dict:\n    try:\n        return optimize_thread_allocation(thread_count, workload)\n    except Exception as e:\n        return {'error': str(e)}"
        },
        {
          "name": "response_time_optimizer",
          "description": "Оптимизация времени отклика",
          "parameters": {
          "current_latency": "integer",
          "target_latency": "integer"
          },
          "code": "async def response_time_optimizer(current_latency: int, target_latency: int) -> dict:\n    try:\n        return optimize_response_time(current_latency, target_latency)\n    except Exception as e:\n        return {'error': str(e)}"
        }
        ]
      }
